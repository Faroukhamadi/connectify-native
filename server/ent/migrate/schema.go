// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// HeaderColumns holds the columns for the "header" table.
	HeaderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "sender_id", Type: field.TypeInt32, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "message_id", Type: field.TypeInt32, Nullable: true},
		{Name: "receiver_id", Type: field.TypeInt32, Nullable: true},
	}
	// HeaderTable holds the schema information for the "header" table.
	HeaderTable = &schema.Table{
		Name:       "header",
		Columns:    HeaderColumns,
		PrimaryKey: []*schema.Column{HeaderColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "header_user_headers",
				Columns:    []*schema.Column{HeaderColumns[5]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MessageColumns holds the columns for the "message" table.
	MessageColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true},
		{Name: "is_from_sender", Type: field.TypeBool, Nullable: true},
		{Name: "content", Type: field.TypeString, Nullable: true},
		{Name: "read", Type: field.TypeBool, Nullable: true},
		{Name: "sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "header_id", Type: field.TypeInt32, Unique: true, Nullable: true},
	}
	// MessageTable holds the schema information for the "message" table.
	MessageTable = &schema.Table{
		Name:       "message",
		Columns:    MessageColumns,
		PrimaryKey: []*schema.Column{MessageColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "message_header_message",
				Columns:    []*schema.Column{MessageColumns[5]},
				RefColumns: []*schema.Column{HeaderColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// UserChildUsersColumns holds the columns for the "user_child_users" table.
	UserChildUsersColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt32},
		{Name: "parent_user_id", Type: field.TypeInt32},
	}
	// UserChildUsersTable holds the schema information for the "user_child_users" table.
	UserChildUsersTable = &schema.Table{
		Name:       "user_child_users",
		Columns:    UserChildUsersColumns,
		PrimaryKey: []*schema.Column{UserChildUsersColumns[0], UserChildUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_child_users_user_id",
				Columns:    []*schema.Column{UserChildUsersColumns[0]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_child_users_parent_user_id",
				Columns:    []*schema.Column{UserChildUsersColumns[1]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		HeaderTable,
		MessageTable,
		UserTable,
		UserChildUsersTable,
	}
)

func init() {
	HeaderTable.ForeignKeys[0].RefTable = UserTable
	HeaderTable.Annotation = &entsql.Annotation{
		Table: "header",
	}
	MessageTable.ForeignKeys[0].RefTable = HeaderTable
	MessageTable.Annotation = &entsql.Annotation{
		Table: "message",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	UserChildUsersTable.ForeignKeys[0].RefTable = UserTable
	UserChildUsersTable.ForeignKeys[1].RefTable = UserTable
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/Faroukhamadi/connectify-native/ent/header"
	"github.com/Faroukhamadi/connectify-native/ent/message"
	"github.com/Faroukhamadi/connectify-native/ent/predicate"
	"github.com/Faroukhamadi/connectify-native/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHeader  = "Header"
	TypeMessage = "Message"
	TypeUser    = "User"
)

// HeaderMutation represents an operation that mutates the Header nodes in the graph.
type HeaderMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	status         *string
	senderId       *int32
	addsenderId    *int32
	createdAt      *time.Time
	messageId      *int32
	addmessageId   *int32
	clearedFields  map[string]struct{}
	user           *int32
	cleareduser    bool
	message        *int32
	clearedmessage bool
	done           bool
	oldValue       func(context.Context) (*Header, error)
	predicates     []predicate.Header
}

var _ ent.Mutation = (*HeaderMutation)(nil)

// headerOption allows management of the mutation configuration using functional options.
type headerOption func(*HeaderMutation)

// newHeaderMutation creates new mutation for the Header entity.
func newHeaderMutation(c config, op Op, opts ...headerOption) *HeaderMutation {
	m := &HeaderMutation{
		config:        c,
		op:            op,
		typ:           TypeHeader,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHeaderID sets the ID field of the mutation.
func withHeaderID(id int32) headerOption {
	return func(m *HeaderMutation) {
		var (
			err   error
			once  sync.Once
			value *Header
		)
		m.oldValue = func(ctx context.Context) (*Header, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Header.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHeader sets the old Header of the mutation.
func withHeader(node *Header) headerOption {
	return func(m *HeaderMutation) {
		m.oldValue = func(context.Context) (*Header, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HeaderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HeaderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Header entities.
func (m *HeaderMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HeaderMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HeaderMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Header.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *HeaderMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *HeaderMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *HeaderMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[header.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *HeaderMutation) StatusCleared() bool {
	_, ok := m.clearedFields[header.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *HeaderMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, header.FieldStatus)
}

// SetReceiverId sets the "receiverId" field.
func (m *HeaderMutation) SetReceiverId(i int32) {
	m.user = &i
}

// ReceiverId returns the value of the "receiverId" field in the mutation.
func (m *HeaderMutation) ReceiverId() (r int32, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiverId returns the old "receiverId" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldReceiverId(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiverId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiverId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiverId: %w", err)
	}
	return oldValue.ReceiverId, nil
}

// ClearReceiverId clears the value of the "receiverId" field.
func (m *HeaderMutation) ClearReceiverId() {
	m.user = nil
	m.clearedFields[header.FieldReceiverId] = struct{}{}
}

// ReceiverIdCleared returns if the "receiverId" field was cleared in this mutation.
func (m *HeaderMutation) ReceiverIdCleared() bool {
	_, ok := m.clearedFields[header.FieldReceiverId]
	return ok
}

// ResetReceiverId resets all changes to the "receiverId" field.
func (m *HeaderMutation) ResetReceiverId() {
	m.user = nil
	delete(m.clearedFields, header.FieldReceiverId)
}

// SetSenderId sets the "senderId" field.
func (m *HeaderMutation) SetSenderId(i int32) {
	m.senderId = &i
	m.addsenderId = nil
}

// SenderId returns the value of the "senderId" field in the mutation.
func (m *HeaderMutation) SenderId() (r int32, exists bool) {
	v := m.senderId
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderId returns the old "senderId" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldSenderId(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderId: %w", err)
	}
	return oldValue.SenderId, nil
}

// AddSenderId adds i to the "senderId" field.
func (m *HeaderMutation) AddSenderId(i int32) {
	if m.addsenderId != nil {
		*m.addsenderId += i
	} else {
		m.addsenderId = &i
	}
}

// AddedSenderId returns the value that was added to the "senderId" field in this mutation.
func (m *HeaderMutation) AddedSenderId() (r int32, exists bool) {
	v := m.addsenderId
	if v == nil {
		return
	}
	return *v, true
}

// ClearSenderId clears the value of the "senderId" field.
func (m *HeaderMutation) ClearSenderId() {
	m.senderId = nil
	m.addsenderId = nil
	m.clearedFields[header.FieldSenderId] = struct{}{}
}

// SenderIdCleared returns if the "senderId" field was cleared in this mutation.
func (m *HeaderMutation) SenderIdCleared() bool {
	_, ok := m.clearedFields[header.FieldSenderId]
	return ok
}

// ResetSenderId resets all changes to the "senderId" field.
func (m *HeaderMutation) ResetSenderId() {
	m.senderId = nil
	m.addsenderId = nil
	delete(m.clearedFields, header.FieldSenderId)
}

// SetCreatedAt sets the "createdAt" field.
func (m *HeaderMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *HeaderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *HeaderMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetMessageId sets the "messageId" field.
func (m *HeaderMutation) SetMessageId(i int32) {
	m.messageId = &i
	m.addmessageId = nil
}

// MessageId returns the value of the "messageId" field in the mutation.
func (m *HeaderMutation) MessageId() (r int32, exists bool) {
	v := m.messageId
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageId returns the old "messageId" field's value of the Header entity.
// If the Header object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HeaderMutation) OldMessageId(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageId: %w", err)
	}
	return oldValue.MessageId, nil
}

// AddMessageId adds i to the "messageId" field.
func (m *HeaderMutation) AddMessageId(i int32) {
	if m.addmessageId != nil {
		*m.addmessageId += i
	} else {
		m.addmessageId = &i
	}
}

// AddedMessageId returns the value that was added to the "messageId" field in this mutation.
func (m *HeaderMutation) AddedMessageId() (r int32, exists bool) {
	v := m.addmessageId
	if v == nil {
		return
	}
	return *v, true
}

// ClearMessageId clears the value of the "messageId" field.
func (m *HeaderMutation) ClearMessageId() {
	m.messageId = nil
	m.addmessageId = nil
	m.clearedFields[header.FieldMessageId] = struct{}{}
}

// MessageIdCleared returns if the "messageId" field was cleared in this mutation.
func (m *HeaderMutation) MessageIdCleared() bool {
	_, ok := m.clearedFields[header.FieldMessageId]
	return ok
}

// ResetMessageId resets all changes to the "messageId" field.
func (m *HeaderMutation) ResetMessageId() {
	m.messageId = nil
	m.addmessageId = nil
	delete(m.clearedFields, header.FieldMessageId)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *HeaderMutation) SetUserID(id int32) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *HeaderMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *HeaderMutation) UserCleared() bool {
	return m.ReceiverIdCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *HeaderMutation) UserID() (id int32, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HeaderMutation) UserIDs() (ids []int32) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HeaderMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *HeaderMutation) SetMessageID(id int32) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *HeaderMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared reports if the "message" edge to the Message entity was cleared.
func (m *HeaderMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *HeaderMutation) MessageID() (id int32, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *HeaderMutation) MessageIDs() (ids []int32) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *HeaderMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// Where appends a list predicates to the HeaderMutation builder.
func (m *HeaderMutation) Where(ps ...predicate.Header) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HeaderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Header).
func (m *HeaderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HeaderMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, header.FieldStatus)
	}
	if m.user != nil {
		fields = append(fields, header.FieldReceiverId)
	}
	if m.senderId != nil {
		fields = append(fields, header.FieldSenderId)
	}
	if m.createdAt != nil {
		fields = append(fields, header.FieldCreatedAt)
	}
	if m.messageId != nil {
		fields = append(fields, header.FieldMessageId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HeaderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case header.FieldStatus:
		return m.Status()
	case header.FieldReceiverId:
		return m.ReceiverId()
	case header.FieldSenderId:
		return m.SenderId()
	case header.FieldCreatedAt:
		return m.CreatedAt()
	case header.FieldMessageId:
		return m.MessageId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HeaderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case header.FieldStatus:
		return m.OldStatus(ctx)
	case header.FieldReceiverId:
		return m.OldReceiverId(ctx)
	case header.FieldSenderId:
		return m.OldSenderId(ctx)
	case header.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case header.FieldMessageId:
		return m.OldMessageId(ctx)
	}
	return nil, fmt.Errorf("unknown Header field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeaderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case header.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case header.FieldReceiverId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiverId(v)
		return nil
	case header.FieldSenderId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderId(v)
		return nil
	case header.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case header.FieldMessageId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageId(v)
		return nil
	}
	return fmt.Errorf("unknown Header field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HeaderMutation) AddedFields() []string {
	var fields []string
	if m.addsenderId != nil {
		fields = append(fields, header.FieldSenderId)
	}
	if m.addmessageId != nil {
		fields = append(fields, header.FieldMessageId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HeaderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case header.FieldSenderId:
		return m.AddedSenderId()
	case header.FieldMessageId:
		return m.AddedMessageId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HeaderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case header.FieldSenderId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSenderId(v)
		return nil
	case header.FieldMessageId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageId(v)
		return nil
	}
	return fmt.Errorf("unknown Header numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HeaderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(header.FieldStatus) {
		fields = append(fields, header.FieldStatus)
	}
	if m.FieldCleared(header.FieldReceiverId) {
		fields = append(fields, header.FieldReceiverId)
	}
	if m.FieldCleared(header.FieldSenderId) {
		fields = append(fields, header.FieldSenderId)
	}
	if m.FieldCleared(header.FieldMessageId) {
		fields = append(fields, header.FieldMessageId)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HeaderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HeaderMutation) ClearField(name string) error {
	switch name {
	case header.FieldStatus:
		m.ClearStatus()
		return nil
	case header.FieldReceiverId:
		m.ClearReceiverId()
		return nil
	case header.FieldSenderId:
		m.ClearSenderId()
		return nil
	case header.FieldMessageId:
		m.ClearMessageId()
		return nil
	}
	return fmt.Errorf("unknown Header nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HeaderMutation) ResetField(name string) error {
	switch name {
	case header.FieldStatus:
		m.ResetStatus()
		return nil
	case header.FieldReceiverId:
		m.ResetReceiverId()
		return nil
	case header.FieldSenderId:
		m.ResetSenderId()
		return nil
	case header.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case header.FieldMessageId:
		m.ResetMessageId()
		return nil
	}
	return fmt.Errorf("unknown Header field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HeaderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, header.EdgeUser)
	}
	if m.message != nil {
		edges = append(edges, header.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HeaderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case header.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case header.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HeaderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HeaderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HeaderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, header.EdgeUser)
	}
	if m.clearedmessage {
		edges = append(edges, header.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HeaderMutation) EdgeCleared(name string) bool {
	switch name {
	case header.EdgeUser:
		return m.cleareduser
	case header.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HeaderMutation) ClearEdge(name string) error {
	switch name {
	case header.EdgeUser:
		m.ClearUser()
		return nil
	case header.EdgeMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown Header unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HeaderMutation) ResetEdge(name string) error {
	switch name {
	case header.EdgeUser:
		m.ResetUser()
		return nil
	case header.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Header edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	is_from_sender *bool
	content        *string
	read           *bool
	sent_at        *time.Time
	clearedFields  map[string]struct{}
	header         *int32
	clearedheader  bool
	done           bool
	oldValue       func(context.Context) (*Message, error)
	predicates     []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int32) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHeaderID sets the "header_id" field.
func (m *MessageMutation) SetHeaderID(i int32) {
	m.header = &i
}

// HeaderID returns the value of the "header_id" field in the mutation.
func (m *MessageMutation) HeaderID() (r int32, exists bool) {
	v := m.header
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaderID returns the old "header_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldHeaderID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeaderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeaderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaderID: %w", err)
	}
	return oldValue.HeaderID, nil
}

// ClearHeaderID clears the value of the "header_id" field.
func (m *MessageMutation) ClearHeaderID() {
	m.header = nil
	m.clearedFields[message.FieldHeaderID] = struct{}{}
}

// HeaderIDCleared returns if the "header_id" field was cleared in this mutation.
func (m *MessageMutation) HeaderIDCleared() bool {
	_, ok := m.clearedFields[message.FieldHeaderID]
	return ok
}

// ResetHeaderID resets all changes to the "header_id" field.
func (m *MessageMutation) ResetHeaderID() {
	m.header = nil
	delete(m.clearedFields, message.FieldHeaderID)
}

// SetIsFromSender sets the "is_from_sender" field.
func (m *MessageMutation) SetIsFromSender(b bool) {
	m.is_from_sender = &b
}

// IsFromSender returns the value of the "is_from_sender" field in the mutation.
func (m *MessageMutation) IsFromSender() (r bool, exists bool) {
	v := m.is_from_sender
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFromSender returns the old "is_from_sender" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldIsFromSender(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFromSender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFromSender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFromSender: %w", err)
	}
	return oldValue.IsFromSender, nil
}

// ClearIsFromSender clears the value of the "is_from_sender" field.
func (m *MessageMutation) ClearIsFromSender() {
	m.is_from_sender = nil
	m.clearedFields[message.FieldIsFromSender] = struct{}{}
}

// IsFromSenderCleared returns if the "is_from_sender" field was cleared in this mutation.
func (m *MessageMutation) IsFromSenderCleared() bool {
	_, ok := m.clearedFields[message.FieldIsFromSender]
	return ok
}

// ResetIsFromSender resets all changes to the "is_from_sender" field.
func (m *MessageMutation) ResetIsFromSender() {
	m.is_from_sender = nil
	delete(m.clearedFields, message.FieldIsFromSender)
}

// SetContent sets the "content" field.
func (m *MessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *MessageMutation) ClearContent() {
	m.content = nil
	m.clearedFields[message.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *MessageMutation) ContentCleared() bool {
	_, ok := m.clearedFields[message.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *MessageMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, message.FieldContent)
}

// SetRead sets the "read" field.
func (m *MessageMutation) SetRead(b bool) {
	m.read = &b
}

// Read returns the value of the "read" field in the mutation.
func (m *MessageMutation) Read() (r bool, exists bool) {
	v := m.read
	if v == nil {
		return
	}
	return *v, true
}

// OldRead returns the old "read" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRead: %w", err)
	}
	return oldValue.Read, nil
}

// ClearRead clears the value of the "read" field.
func (m *MessageMutation) ClearRead() {
	m.read = nil
	m.clearedFields[message.FieldRead] = struct{}{}
}

// ReadCleared returns if the "read" field was cleared in this mutation.
func (m *MessageMutation) ReadCleared() bool {
	_, ok := m.clearedFields[message.FieldRead]
	return ok
}

// ResetRead resets all changes to the "read" field.
func (m *MessageMutation) ResetRead() {
	m.read = nil
	delete(m.clearedFields, message.FieldRead)
}

// SetSentAt sets the "sent_at" field.
func (m *MessageMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *MessageMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ClearSentAt clears the value of the "sent_at" field.
func (m *MessageMutation) ClearSentAt() {
	m.sent_at = nil
	m.clearedFields[message.FieldSentAt] = struct{}{}
}

// SentAtCleared returns if the "sent_at" field was cleared in this mutation.
func (m *MessageMutation) SentAtCleared() bool {
	_, ok := m.clearedFields[message.FieldSentAt]
	return ok
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *MessageMutation) ResetSentAt() {
	m.sent_at = nil
	delete(m.clearedFields, message.FieldSentAt)
}

// ClearHeader clears the "header" edge to the Header entity.
func (m *MessageMutation) ClearHeader() {
	m.clearedheader = true
}

// HeaderCleared reports if the "header" edge to the Header entity was cleared.
func (m *MessageMutation) HeaderCleared() bool {
	return m.HeaderIDCleared() || m.clearedheader
}

// HeaderIDs returns the "header" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HeaderID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) HeaderIDs() (ids []int32) {
	if id := m.header; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHeader resets all changes to the "header" edge.
func (m *MessageMutation) ResetHeader() {
	m.header = nil
	m.clearedheader = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.header != nil {
		fields = append(fields, message.FieldHeaderID)
	}
	if m.is_from_sender != nil {
		fields = append(fields, message.FieldIsFromSender)
	}
	if m.content != nil {
		fields = append(fields, message.FieldContent)
	}
	if m.read != nil {
		fields = append(fields, message.FieldRead)
	}
	if m.sent_at != nil {
		fields = append(fields, message.FieldSentAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldHeaderID:
		return m.HeaderID()
	case message.FieldIsFromSender:
		return m.IsFromSender()
	case message.FieldContent:
		return m.Content()
	case message.FieldRead:
		return m.Read()
	case message.FieldSentAt:
		return m.SentAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldHeaderID:
		return m.OldHeaderID(ctx)
	case message.FieldIsFromSender:
		return m.OldIsFromSender(ctx)
	case message.FieldContent:
		return m.OldContent(ctx)
	case message.FieldRead:
		return m.OldRead(ctx)
	case message.FieldSentAt:
		return m.OldSentAt(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldHeaderID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaderID(v)
		return nil
	case message.FieldIsFromSender:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFromSender(v)
		return nil
	case message.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case message.FieldRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRead(v)
		return nil
	case message.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldHeaderID) {
		fields = append(fields, message.FieldHeaderID)
	}
	if m.FieldCleared(message.FieldIsFromSender) {
		fields = append(fields, message.FieldIsFromSender)
	}
	if m.FieldCleared(message.FieldContent) {
		fields = append(fields, message.FieldContent)
	}
	if m.FieldCleared(message.FieldRead) {
		fields = append(fields, message.FieldRead)
	}
	if m.FieldCleared(message.FieldSentAt) {
		fields = append(fields, message.FieldSentAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldHeaderID:
		m.ClearHeaderID()
		return nil
	case message.FieldIsFromSender:
		m.ClearIsFromSender()
		return nil
	case message.FieldContent:
		m.ClearContent()
		return nil
	case message.FieldRead:
		m.ClearRead()
		return nil
	case message.FieldSentAt:
		m.ClearSentAt()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldHeaderID:
		m.ResetHeaderID()
		return nil
	case message.FieldIsFromSender:
		m.ResetIsFromSender()
		return nil
	case message.FieldContent:
		m.ResetContent()
		return nil
	case message.FieldRead:
		m.ResetRead()
		return nil
	case message.FieldSentAt:
		m.ResetSentAt()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.header != nil {
		edges = append(edges, message.EdgeHeader)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeHeader:
		if id := m.header; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedheader {
		edges = append(edges, message.EdgeHeader)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeHeader:
		return m.clearedheader
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeHeader:
		m.ClearHeader()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeHeader:
		m.ResetHeader()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int32
	username            *string
	password            *string
	first_name          *string
	last_name           *string
	clearedFields       map[string]struct{}
	child_users         map[int32]struct{}
	removedchild_users  map[int32]struct{}
	clearedchild_users  bool
	parent_users        map[int32]struct{}
	removedparent_users map[int32]struct{}
	clearedparent_users bool
	headers             map[int32]struct{}
	removedheaders      map[int32]struct{}
	clearedheaders      bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int32) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *UserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[user.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *UserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, user.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *UserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[user.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *UserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, user.FieldLastName)
}

// AddChildUserIDs adds the "child_users" edge to the User entity by ids.
func (m *UserMutation) AddChildUserIDs(ids ...int32) {
	if m.child_users == nil {
		m.child_users = make(map[int32]struct{})
	}
	for i := range ids {
		m.child_users[ids[i]] = struct{}{}
	}
}

// ClearChildUsers clears the "child_users" edge to the User entity.
func (m *UserMutation) ClearChildUsers() {
	m.clearedchild_users = true
}

// ChildUsersCleared reports if the "child_users" edge to the User entity was cleared.
func (m *UserMutation) ChildUsersCleared() bool {
	return m.clearedchild_users
}

// RemoveChildUserIDs removes the "child_users" edge to the User entity by IDs.
func (m *UserMutation) RemoveChildUserIDs(ids ...int32) {
	if m.removedchild_users == nil {
		m.removedchild_users = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.child_users, ids[i])
		m.removedchild_users[ids[i]] = struct{}{}
	}
}

// RemovedChildUsers returns the removed IDs of the "child_users" edge to the User entity.
func (m *UserMutation) RemovedChildUsersIDs() (ids []int32) {
	for id := range m.removedchild_users {
		ids = append(ids, id)
	}
	return
}

// ChildUsersIDs returns the "child_users" edge IDs in the mutation.
func (m *UserMutation) ChildUsersIDs() (ids []int32) {
	for id := range m.child_users {
		ids = append(ids, id)
	}
	return
}

// ResetChildUsers resets all changes to the "child_users" edge.
func (m *UserMutation) ResetChildUsers() {
	m.child_users = nil
	m.clearedchild_users = false
	m.removedchild_users = nil
}

// AddParentUserIDs adds the "parent_users" edge to the User entity by ids.
func (m *UserMutation) AddParentUserIDs(ids ...int32) {
	if m.parent_users == nil {
		m.parent_users = make(map[int32]struct{})
	}
	for i := range ids {
		m.parent_users[ids[i]] = struct{}{}
	}
}

// ClearParentUsers clears the "parent_users" edge to the User entity.
func (m *UserMutation) ClearParentUsers() {
	m.clearedparent_users = true
}

// ParentUsersCleared reports if the "parent_users" edge to the User entity was cleared.
func (m *UserMutation) ParentUsersCleared() bool {
	return m.clearedparent_users
}

// RemoveParentUserIDs removes the "parent_users" edge to the User entity by IDs.
func (m *UserMutation) RemoveParentUserIDs(ids ...int32) {
	if m.removedparent_users == nil {
		m.removedparent_users = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.parent_users, ids[i])
		m.removedparent_users[ids[i]] = struct{}{}
	}
}

// RemovedParentUsers returns the removed IDs of the "parent_users" edge to the User entity.
func (m *UserMutation) RemovedParentUsersIDs() (ids []int32) {
	for id := range m.removedparent_users {
		ids = append(ids, id)
	}
	return
}

// ParentUsersIDs returns the "parent_users" edge IDs in the mutation.
func (m *UserMutation) ParentUsersIDs() (ids []int32) {
	for id := range m.parent_users {
		ids = append(ids, id)
	}
	return
}

// ResetParentUsers resets all changes to the "parent_users" edge.
func (m *UserMutation) ResetParentUsers() {
	m.parent_users = nil
	m.clearedparent_users = false
	m.removedparent_users = nil
}

// AddHeaderIDs adds the "headers" edge to the Header entity by ids.
func (m *UserMutation) AddHeaderIDs(ids ...int32) {
	if m.headers == nil {
		m.headers = make(map[int32]struct{})
	}
	for i := range ids {
		m.headers[ids[i]] = struct{}{}
	}
}

// ClearHeaders clears the "headers" edge to the Header entity.
func (m *UserMutation) ClearHeaders() {
	m.clearedheaders = true
}

// HeadersCleared reports if the "headers" edge to the Header entity was cleared.
func (m *UserMutation) HeadersCleared() bool {
	return m.clearedheaders
}

// RemoveHeaderIDs removes the "headers" edge to the Header entity by IDs.
func (m *UserMutation) RemoveHeaderIDs(ids ...int32) {
	if m.removedheaders == nil {
		m.removedheaders = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.headers, ids[i])
		m.removedheaders[ids[i]] = struct{}{}
	}
}

// RemovedHeaders returns the removed IDs of the "headers" edge to the Header entity.
func (m *UserMutation) RemovedHeadersIDs() (ids []int32) {
	for id := range m.removedheaders {
		ids = append(ids, id)
	}
	return
}

// HeadersIDs returns the "headers" edge IDs in the mutation.
func (m *UserMutation) HeadersIDs() (ids []int32) {
	for id := range m.headers {
		ids = append(ids, id)
	}
	return
}

// ResetHeaders resets all changes to the "headers" edge.
func (m *UserMutation) ResetHeaders() {
	m.headers = nil
	m.clearedheaders = false
	m.removedheaders = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldFirstName) {
		fields = append(fields, user.FieldFirstName)
	}
	if m.FieldCleared(user.FieldLastName) {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldFirstName:
		m.ClearFirstName()
		return nil
	case user.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.child_users != nil {
		edges = append(edges, user.EdgeChildUsers)
	}
	if m.parent_users != nil {
		edges = append(edges, user.EdgeParentUsers)
	}
	if m.headers != nil {
		edges = append(edges, user.EdgeHeaders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeChildUsers:
		ids := make([]ent.Value, 0, len(m.child_users))
		for id := range m.child_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeParentUsers:
		ids := make([]ent.Value, 0, len(m.parent_users))
		for id := range m.parent_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHeaders:
		ids := make([]ent.Value, 0, len(m.headers))
		for id := range m.headers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchild_users != nil {
		edges = append(edges, user.EdgeChildUsers)
	}
	if m.removedparent_users != nil {
		edges = append(edges, user.EdgeParentUsers)
	}
	if m.removedheaders != nil {
		edges = append(edges, user.EdgeHeaders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeChildUsers:
		ids := make([]ent.Value, 0, len(m.removedchild_users))
		for id := range m.removedchild_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeParentUsers:
		ids := make([]ent.Value, 0, len(m.removedparent_users))
		for id := range m.removedparent_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHeaders:
		ids := make([]ent.Value, 0, len(m.removedheaders))
		for id := range m.removedheaders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchild_users {
		edges = append(edges, user.EdgeChildUsers)
	}
	if m.clearedparent_users {
		edges = append(edges, user.EdgeParentUsers)
	}
	if m.clearedheaders {
		edges = append(edges, user.EdgeHeaders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeChildUsers:
		return m.clearedchild_users
	case user.EdgeParentUsers:
		return m.clearedparent_users
	case user.EdgeHeaders:
		return m.clearedheaders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeChildUsers:
		m.ResetChildUsers()
		return nil
	case user.EdgeParentUsers:
		m.ResetParentUsers()
		return nil
	case user.EdgeHeaders:
		m.ResetHeaders()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

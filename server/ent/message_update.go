// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/connectify-native/ent/header"
	"github.com/Faroukhamadi/connectify-native/ent/message"
	"github.com/Faroukhamadi/connectify-native/ent/predicate"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetHeaderID sets the "header_id" field.
func (mu *MessageUpdate) SetHeaderID(i int32) *MessageUpdate {
	mu.mutation.SetHeaderID(i)
	return mu
}

// SetNillableHeaderID sets the "header_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableHeaderID(i *int32) *MessageUpdate {
	if i != nil {
		mu.SetHeaderID(*i)
	}
	return mu
}

// ClearHeaderID clears the value of the "header_id" field.
func (mu *MessageUpdate) ClearHeaderID() *MessageUpdate {
	mu.mutation.ClearHeaderID()
	return mu
}

// SetIsFromSender sets the "is_from_sender" field.
func (mu *MessageUpdate) SetIsFromSender(b bool) *MessageUpdate {
	mu.mutation.SetIsFromSender(b)
	return mu
}

// SetNillableIsFromSender sets the "is_from_sender" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableIsFromSender(b *bool) *MessageUpdate {
	if b != nil {
		mu.SetIsFromSender(*b)
	}
	return mu
}

// ClearIsFromSender clears the value of the "is_from_sender" field.
func (mu *MessageUpdate) ClearIsFromSender() *MessageUpdate {
	mu.mutation.ClearIsFromSender()
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(s string) *MessageUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableContent(s *string) *MessageUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// ClearContent clears the value of the "content" field.
func (mu *MessageUpdate) ClearContent() *MessageUpdate {
	mu.mutation.ClearContent()
	return mu
}

// SetRead sets the "read" field.
func (mu *MessageUpdate) SetRead(b bool) *MessageUpdate {
	mu.mutation.SetRead(b)
	return mu
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableRead(b *bool) *MessageUpdate {
	if b != nil {
		mu.SetRead(*b)
	}
	return mu
}

// ClearRead clears the value of the "read" field.
func (mu *MessageUpdate) ClearRead() *MessageUpdate {
	mu.mutation.ClearRead()
	return mu
}

// SetSentAt sets the "sent_at" field.
func (mu *MessageUpdate) SetSentAt(t time.Time) *MessageUpdate {
	mu.mutation.SetSentAt(t)
	return mu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSentAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetSentAt(*t)
	}
	return mu
}

// ClearSentAt clears the value of the "sent_at" field.
func (mu *MessageUpdate) ClearSentAt() *MessageUpdate {
	mu.mutation.ClearSentAt()
	return mu
}

// SetHeader sets the "header" edge to the Header entity.
func (mu *MessageUpdate) SetHeader(h *Header) *MessageUpdate {
	return mu.SetHeaderID(h.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearHeader clears the "header" edge to the Header entity.
func (mu *MessageUpdate) ClearHeader() *MessageUpdate {
	mu.mutation.ClearHeader()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.IsFromSender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: message.FieldIsFromSender,
		})
	}
	if mu.mutation.IsFromSenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: message.FieldIsFromSender,
		})
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldContent,
		})
	}
	if mu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldContent,
		})
	}
	if value, ok := mu.mutation.Read(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: message.FieldRead,
		})
	}
	if mu.mutation.ReadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: message.FieldRead,
		})
	}
	if value, ok := mu.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldSentAt,
		})
	}
	if mu.mutation.SentAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldSentAt,
		})
	}
	if mu.mutation.HeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.HeaderTable,
			Columns: []string{message.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: header.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.HeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.HeaderTable,
			Columns: []string{message.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: header.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetHeaderID sets the "header_id" field.
func (muo *MessageUpdateOne) SetHeaderID(i int32) *MessageUpdateOne {
	muo.mutation.SetHeaderID(i)
	return muo
}

// SetNillableHeaderID sets the "header_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableHeaderID(i *int32) *MessageUpdateOne {
	if i != nil {
		muo.SetHeaderID(*i)
	}
	return muo
}

// ClearHeaderID clears the value of the "header_id" field.
func (muo *MessageUpdateOne) ClearHeaderID() *MessageUpdateOne {
	muo.mutation.ClearHeaderID()
	return muo
}

// SetIsFromSender sets the "is_from_sender" field.
func (muo *MessageUpdateOne) SetIsFromSender(b bool) *MessageUpdateOne {
	muo.mutation.SetIsFromSender(b)
	return muo
}

// SetNillableIsFromSender sets the "is_from_sender" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableIsFromSender(b *bool) *MessageUpdateOne {
	if b != nil {
		muo.SetIsFromSender(*b)
	}
	return muo
}

// ClearIsFromSender clears the value of the "is_from_sender" field.
func (muo *MessageUpdateOne) ClearIsFromSender() *MessageUpdateOne {
	muo.mutation.ClearIsFromSender()
	return muo
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(s string) *MessageUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableContent(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// ClearContent clears the value of the "content" field.
func (muo *MessageUpdateOne) ClearContent() *MessageUpdateOne {
	muo.mutation.ClearContent()
	return muo
}

// SetRead sets the "read" field.
func (muo *MessageUpdateOne) SetRead(b bool) *MessageUpdateOne {
	muo.mutation.SetRead(b)
	return muo
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableRead(b *bool) *MessageUpdateOne {
	if b != nil {
		muo.SetRead(*b)
	}
	return muo
}

// ClearRead clears the value of the "read" field.
func (muo *MessageUpdateOne) ClearRead() *MessageUpdateOne {
	muo.mutation.ClearRead()
	return muo
}

// SetSentAt sets the "sent_at" field.
func (muo *MessageUpdateOne) SetSentAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetSentAt(t)
	return muo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSentAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetSentAt(*t)
	}
	return muo
}

// ClearSentAt clears the value of the "sent_at" field.
func (muo *MessageUpdateOne) ClearSentAt() *MessageUpdateOne {
	muo.mutation.ClearSentAt()
	return muo
}

// SetHeader sets the "header" edge to the Header entity.
func (muo *MessageUpdateOne) SetHeader(h *Header) *MessageUpdateOne {
	return muo.SetHeaderID(h.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearHeader clears the "header" edge to the Header entity.
func (muo *MessageUpdateOne) ClearHeader() *MessageUpdateOne {
	muo.mutation.ClearHeader()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Message)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.IsFromSender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: message.FieldIsFromSender,
		})
	}
	if muo.mutation.IsFromSenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: message.FieldIsFromSender,
		})
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldContent,
		})
	}
	if muo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldContent,
		})
	}
	if value, ok := muo.mutation.Read(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: message.FieldRead,
		})
	}
	if muo.mutation.ReadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: message.FieldRead,
		})
	}
	if value, ok := muo.mutation.SentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldSentAt,
		})
	}
	if muo.mutation.SentAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: message.FieldSentAt,
		})
	}
	if muo.mutation.HeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.HeaderTable,
			Columns: []string{message.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: header.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.HeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   message.HeaderTable,
			Columns: []string{message.HeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: header.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

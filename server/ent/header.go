// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Faroukhamadi/connectify-native/ent/header"
	"github.com/Faroukhamadi/connectify-native/ent/message"
	"github.com/Faroukhamadi/connectify-native/ent/user"
)

// Header is the model entity for the Header schema.
type Header struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ReceiverId holds the value of the "receiverId" field.
	ReceiverId int32 `json:"receiverId,omitempty"`
	// SenderId holds the value of the "senderId" field.
	SenderId int32 `json:"senderId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// MessageId holds the value of the "messageId" field.
	MessageId int32 `json:"messageId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HeaderQuery when eager-loading is set.
	Edges HeaderEdges `json:"edges"`
}

// HeaderEdges holds the relations/edges for other nodes in the graph.
type HeaderEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HeaderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HeaderEdges) MessageOrErr() (*Message, error) {
	if e.loadedTypes[1] {
		if e.Message == nil {
			// The edge message was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: message.Label}
		}
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Header) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case header.FieldID, header.FieldReceiverId, header.FieldSenderId, header.FieldMessageId:
			values[i] = new(sql.NullInt64)
		case header.FieldStatus:
			values[i] = new(sql.NullString)
		case header.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Header", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Header fields.
func (h *Header) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case header.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int32(value.Int64)
		case header.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				h.Status = value.String
			}
		case header.FieldReceiverId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field receiverId", values[i])
			} else if value.Valid {
				h.ReceiverId = int32(value.Int64)
			}
		case header.FieldSenderId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field senderId", values[i])
			} else if value.Valid {
				h.SenderId = int32(value.Int64)
			}
		case header.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case header.FieldMessageId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field messageId", values[i])
			} else if value.Valid {
				h.MessageId = int32(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Header entity.
func (h *Header) QueryUser() *UserQuery {
	return (&HeaderClient{config: h.config}).QueryUser(h)
}

// QueryMessage queries the "message" edge of the Header entity.
func (h *Header) QueryMessage() *MessageQuery {
	return (&HeaderClient{config: h.config}).QueryMessage(h)
}

// Update returns a builder for updating this Header.
// Note that you need to call Header.Unwrap() before calling this method if this Header
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Header) Update() *HeaderUpdateOne {
	return (&HeaderClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Header entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Header) Unwrap() *Header {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Header is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Header) String() string {
	var builder strings.Builder
	builder.WriteString("Header(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("status=")
	builder.WriteString(h.Status)
	builder.WriteString(", ")
	builder.WriteString("receiverId=")
	builder.WriteString(fmt.Sprintf("%v", h.ReceiverId))
	builder.WriteString(", ")
	builder.WriteString("senderId=")
	builder.WriteString(fmt.Sprintf("%v", h.SenderId))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("messageId=")
	builder.WriteString(fmt.Sprintf("%v", h.MessageId))
	builder.WriteByte(')')
	return builder.String()
}

// Headers is a parsable slice of Header.
type Headers []*Header

func (h Headers) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
